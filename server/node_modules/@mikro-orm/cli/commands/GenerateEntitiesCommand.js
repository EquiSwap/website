"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateEntitiesCommand = void 0;
const CLIHelper_1 = require("../CLIHelper");
class GenerateEntitiesCommand {
    constructor() {
        this.command = 'generate-entities';
        this.describe = 'Generate entities based on current database schema';
    }
    /**
     * @inheritDoc
     */
    builder(args) {
        args.option('s', {
            alias: 'save',
            type: 'boolean',
            desc: 'Saves entities to directory defined by --path',
        });
        args.option('d', {
            alias: 'dump',
            type: 'boolean',
            desc: 'Dumps all entities to console',
        });
        args.option('p', {
            alias: 'path',
            type: 'string',
            desc: 'Sets path to directory where to save entities',
        });
        args.option('schema', {
            type: 'string',
            desc: 'Generates entities only for given schema',
        });
        return args;
    }
    /**
     * @inheritDoc
     */
    async handler(args) {
        if (!args.save && !args.dump) {
            return CLIHelper_1.CLIHelper.showHelp();
        }
        const orm = await CLIHelper_1.CLIHelper.getORM(false);
        const { EntityGenerator } = await Promise.resolve().then(() => __importStar(require('@mikro-orm/entity-generator')));
        const generator = new EntityGenerator(orm.em);
        const dump = await generator.generate({ save: args.save, baseDir: args.path, schema: args.schema });
        if (args.dump) {
            CLIHelper_1.CLIHelper.dump(dump.join('\n\n'));
        }
        await orm.close(true);
    }
}
exports.GenerateEntitiesCommand = GenerateEntitiesCommand;
