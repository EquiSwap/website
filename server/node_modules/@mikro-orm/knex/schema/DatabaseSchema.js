"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseSchema = void 0;
const core_1 = require("@mikro-orm/core");
const DatabaseTable_1 = require("./DatabaseTable");
/**
 * @internal
 */
class DatabaseSchema {
    constructor(platform, name) {
        this.platform = platform;
        this.name = name;
        this.tables = [];
        this.namespaces = new Set();
    }
    addTable(name, schema) {
        const namespaceName = schema ?? this.name;
        const table = new DatabaseTable_1.DatabaseTable(this.platform, name, namespaceName);
        this.tables.push(table);
        if (namespaceName != null) {
            this.namespaces.add(namespaceName);
        }
        return table;
    }
    getTables() {
        return this.tables;
    }
    getTable(name) {
        return this.tables.find(t => t.name === name || `${t.schema}.${t.name}` === name);
    }
    hasTable(name) {
        return !!this.getTable(name);
    }
    hasNamespace(namespace) {
        return this.namespaces.has(namespace);
    }
    getNamespaces() {
        return [...this.namespaces];
    }
    static async create(connection, platform, config, schemaName) {
        const schema = new DatabaseSchema(platform, schemaName ?? config.get('schema'));
        const tables = await connection.execute(platform.getSchemaHelper().getListTablesSQL());
        for (const t of tables) {
            if (t.table_name === config.get('migrations').tableName) {
                continue;
            }
            const table = schema.addTable(t.table_name, t.schema_name);
            table.comment = t.table_comment;
            const cols = await platform.getSchemaHelper().getColumns(connection, table.name, table.schema);
            const indexes = await platform.getSchemaHelper().getIndexes(connection, table.name, table.schema);
            const checks = await platform.getSchemaHelper().getChecks(connection, table.name, table.schema);
            const pks = await platform.getSchemaHelper().getPrimaryKeys(connection, indexes, table.name, table.schema);
            const fks = await platform.getSchemaHelper().getForeignKeys(connection, table.name, table.schema);
            const enums = await platform.getSchemaHelper().getEnumDefinitions(connection, checks, table.name, table.schema);
            table.init(cols, indexes, checks, pks, fks, enums);
        }
        return schema;
    }
    static fromMetadata(metadata, platform, config, schemaName) {
        const schema = new DatabaseSchema(platform, schemaName ?? config.get('schema'));
        for (const meta of metadata) {
            const table = schema.addTable(meta.collection, this.getSchemaName(meta, config, schemaName));
            table.comment = meta.comment;
            meta.props
                .filter(prop => this.shouldHaveColumn(meta, prop))
                .forEach(prop => table.addColumnFromProperty(prop, meta));
            meta.indexes.forEach(index => table.addIndex(meta, index, 'index'));
            meta.uniques.forEach(index => table.addIndex(meta, index, 'unique'));
            table.addIndex(meta, { properties: meta.props.filter(prop => prop.primary).map(prop => prop.name) }, 'primary');
            meta.checks.forEach(check => {
                const columnName = check.property ? meta.properties[check.property].fieldNames[0] : undefined;
                table.addCheck({
                    name: check.name,
                    expression: check.expression,
                    definition: `check ((${check.expression}))`,
                    columnName,
                });
            });
        }
        return schema;
    }
    static getSchemaName(meta, config, schema) {
        return (meta.schema === '*' ? schema : meta.schema) ?? config.get('schema');
    }
    static shouldHaveColumn(meta, prop) {
        if (prop.persist === false || !prop.fieldNames) {
            return false;
        }
        if (meta.pivotTable || (core_1.ReferenceType.EMBEDDED && prop.object)) {
            return true;
        }
        const getRootProperty = (prop) => prop.embedded ? getRootProperty(meta.properties[prop.embedded[0]]) : prop;
        const rootProp = getRootProperty(prop);
        if (rootProp.reference === core_1.ReferenceType.EMBEDDED) {
            return prop === rootProp || !rootProp.object;
        }
        return [core_1.ReferenceType.SCALAR, core_1.ReferenceType.MANY_TO_ONE].includes(prop.reference) || (prop.reference === core_1.ReferenceType.ONE_TO_ONE && prop.owner);
    }
    toJSON() {
        const { platform, namespaces, ...rest } = this;
        return { namespaces: [...namespaces], ...rest };
    }
    prune(schema, wildcardSchemaTables) {
        const hasWildcardSchema = wildcardSchemaTables.length > 0;
        this.tables = this.tables.filter(table => {
            return (!schema && !hasWildcardSchema) // no schema specified and we don't have any multi-schema entity
                || table.schema === schema // specified schema matches the table's one
                || (!schema && !wildcardSchemaTables.includes(table.name)); // no schema specified and the table has fixed one provided
        });
        // remove namespaces of ignored tables
        this.namespaces.forEach(ns => !this.tables.find(t => t.schema === ns) && this.namespaces.delete(ns));
    }
}
exports.DatabaseSchema = DatabaseSchema;
