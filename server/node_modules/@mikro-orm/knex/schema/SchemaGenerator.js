"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaGenerator = void 0;
const core_1 = require("@mikro-orm/core");
const DatabaseSchema_1 = require("./DatabaseSchema");
const SchemaComparator_1 = require("./SchemaComparator");
/**
 * Should be renamed to `SqlSchemaGenerator` in v6
 */
class SchemaGenerator extends core_1.AbstractSchemaGenerator {
    constructor() {
        super(...arguments);
        this.helper = this.platform.getSchemaHelper();
        this.knex = this.connection.getKnex();
        this.options = this.config.get('schemaGenerator');
    }
    async generate() {
        const [dropSchema, createSchema] = await Promise.all([
            this.getDropSchemaSQL({ wrap: false }),
            this.getCreateSchemaSQL({ wrap: false }),
        ]);
        return this.wrapSchema(dropSchema + createSchema);
    }
    async createSchema(options) {
        await this.ensureDatabase();
        const sql = await this.getCreateSchemaSQL(options);
        await this.execute(sql);
    }
    /**
     * Returns true if the database was created.
     */
    async ensureDatabase() {
        const dbName = this.config.get('dbName');
        const exists = await this.helper.databaseExists(this.connection, dbName);
        if (!exists) {
            this.config.set('dbName', this.helper.getManagementDbName());
            await this.driver.reconnect();
            await this.createDatabase(dbName);
            this.config.set('dbName', dbName);
            await this.driver.reconnect();
            return true;
        }
        return false;
    }
    getTargetSchema(schema) {
        const metadata = this.getOrderedMetadata(schema);
        const schemaName = schema ?? this.config.get('schema') ?? this.platform.getDefaultSchemaName();
        return DatabaseSchema_1.DatabaseSchema.fromMetadata(metadata, this.platform, this.config, schemaName);
    }
    async getCreateSchemaSQL(options = {}) {
        const wrap = options.wrap ?? this.options.disableForeignKeys;
        const toSchema = this.getTargetSchema(options.schema);
        let ret = '';
        for (const namespace of toSchema.getNamespaces()) {
            if (namespace === this.platform.getDefaultSchemaName()) {
                continue;
            }
            ret += await this.dump(this.knex.schema.createSchemaIfNotExists(namespace));
        }
        for (const tableDef of toSchema.getTables()) {
            ret += await this.dump(this.createTable(tableDef));
        }
        for (const tableDef of toSchema.getTables()) {
            ret += await this.dump(this.createSchemaBuilder(tableDef.schema).alterTable(tableDef.name, table => this.createForeignKeys(table, tableDef, options.schema)));
        }
        return this.wrapSchema(ret, { wrap });
    }
    async dropSchema(options = {}) {
        options.wrap ?? (options.wrap = true);
        if (options.dropDb) {
            const name = this.config.get('dbName');
            return this.dropDatabase(name);
        }
        const sql = await this.getDropSchemaSQL(options);
        await this.execute(sql);
    }
    async clearDatabase(options) {
        // truncate by default, so no value is considered as true
        /* istanbul ignore if */
        if (options?.truncate === false) {
            return super.clearDatabase(options);
        }
        await this.execute(this.helper.disableForeignKeysSQL());
        for (const meta of this.getOrderedMetadata(options?.schema).reverse()) {
            await this.driver.createQueryBuilder(meta.className, this.em?.getTransactionContext(), true, false)
                .withSchema(options?.schema)
                .truncate();
        }
        await this.execute(this.helper.enableForeignKeysSQL());
        if (this.em) {
            const allowGlobalContext = this.config.get('allowGlobalContext');
            this.config.set('allowGlobalContext', true);
            this.em.clear();
            this.config.set('allowGlobalContext', allowGlobalContext);
        }
    }
    async getDropSchemaSQL(options = {}) {
        const wrap = options.wrap ?? this.options.disableForeignKeys;
        const metadata = this.getOrderedMetadata(options.schema).reverse();
        let ret = '';
        for (const meta of metadata) {
            ret += await this.dump(this.dropTable(meta.collection, this.getSchemaName(meta, options)), '\n');
        }
        if (options.dropMigrationsTable) {
            ret += await this.dump(this.dropTable(this.config.get('migrations').tableName, this.config.get('schema')), '\n');
        }
        return this.wrapSchema(ret + '\n', { wrap });
    }
    getSchemaName(meta, options) {
        const schemaName = options.schema ?? this.config.get('schema');
        /* istanbul ignore next */
        return meta.schema && meta.schema === '*' ? schemaName : (meta.schema ?? schemaName);
    }
    async updateSchema(options = {}) {
        const sql = await this.getUpdateSchemaSQL(options);
        await this.execute(sql);
    }
    async getUpdateSchemaSQL(options = {}) {
        const { fromSchema, toSchema } = await this.prepareSchemaForComparison(options);
        const comparator = new SchemaComparator_1.SchemaComparator(this.platform);
        const diffUp = comparator.compare(fromSchema, toSchema);
        return this.diffToSQL(diffUp, options);
    }
    async getUpdateSchemaMigrationSQL(options = {}) {
        const { fromSchema, toSchema } = await this.prepareSchemaForComparison(options);
        const comparator = new SchemaComparator_1.SchemaComparator(this.platform);
        const diffUp = comparator.compare(fromSchema, toSchema);
        const diffDown = comparator.compare(toSchema, fromSchema);
        return {
            up: await this.diffToSQL(diffUp, options),
            down: this.platform.supportsDownMigrations() ? await this.diffToSQL(diffDown, options) : '',
        };
    }
    async prepareSchemaForComparison(options) {
        options.wrap ?? (options.wrap = this.options.disableForeignKeys);
        options.safe ?? (options.safe = false);
        options.dropTables ?? (options.dropTables = true);
        const toSchema = this.getTargetSchema(options.schema);
        const fromSchema = options.fromSchema ?? await DatabaseSchema_1.DatabaseSchema.create(this.connection, this.platform, this.config, options.schema);
        const wildcardSchemaTables = Object.values(this.metadata.getAll()).filter(meta => meta.schema === '*').map(meta => meta.tableName);
        fromSchema.prune(options.schema, wildcardSchemaTables);
        toSchema.prune(options.schema, wildcardSchemaTables);
        return { fromSchema, toSchema };
    }
    async diffToSQL(schemaDiff, options) {
        let ret = '';
        if (this.platform.supportsSchemas()) {
            for (const newNamespace of schemaDiff.newNamespaces) {
                // schema might already exist, e.g. explicit usage of `public` in postgres
                ret += await this.dump(this.knex.schema.createSchemaIfNotExists(newNamespace));
            }
        }
        if (!options.safe) {
            for (const orphanedForeignKey of schemaDiff.orphanedForeignKeys) {
                const [schemaName, tableName] = this.splitTableName(orphanedForeignKey.localTableName);
                ret += await this.dump(this.createSchemaBuilder(schemaName).alterTable(tableName, table => {
                    return table.dropForeign(orphanedForeignKey.columnNames, orphanedForeignKey.constraintName);
                }));
            }
        }
        for (const newTable of Object.values(schemaDiff.newTables)) {
            ret += await this.dump(this.createTable(newTable));
        }
        for (const newTable of Object.values(schemaDiff.newTables)) {
            ret += await this.dump(this.createSchemaBuilder(newTable.schema).alterTable(newTable.name, table => {
                this.createForeignKeys(table, newTable, options.schema);
            }));
        }
        if (options.dropTables && !options.safe) {
            for (const table of Object.values(schemaDiff.removedTables)) {
                ret += await this.dump(this.dropTable(table.name, table.schema));
            }
        }
        for (const changedTable of Object.values(schemaDiff.changedTables)) {
            for (const builder of this.preAlterTable(changedTable, options.safe)) {
                ret += await this.dump(builder);
            }
        }
        for (const changedTable of Object.values(schemaDiff.changedTables)) {
            for (const builder of this.alterTable(changedTable, options.safe)) {
                ret += await this.dump(builder);
            }
        }
        if (options.dropTables && !options.safe) {
            for (const removedNamespace of schemaDiff.removedNamespaces) {
                ret += await this.dump(this.knex.schema.dropSchema(removedNamespace));
            }
        }
        return this.wrapSchema(ret, options);
    }
    getReferencedTableName(referencedTableName, schema) {
        const [schemaName, tableName] = this.splitTableName(referencedTableName);
        schema = schemaName ?? schema ?? this.config.get('schema');
        /* istanbul ignore next */
        if (schema && schemaName === '*') {
            return `${schema}.${referencedTableName.replace(/^\*\./, '')}`;
        }
        if (schemaName === this.platform.getDefaultSchemaName()) {
            return tableName;
        }
        return `${schemaName}.${tableName}`;
    }
    createForeignKey(table, foreignKey, schema) {
        if (!this.options.createForeignKeyConstraints) {
            return;
        }
        const builder = table
            .foreign(foreignKey.columnNames, foreignKey.constraintName)
            .references(foreignKey.referencedColumnNames)
            .inTable(this.getReferencedTableName(foreignKey.referencedTableName, schema))
            .withKeyName(foreignKey.constraintName);
        if (foreignKey.updateRule) {
            builder.onUpdate(foreignKey.updateRule);
        }
        if (foreignKey.deleteRule) {
            builder.onDelete(foreignKey.deleteRule);
        }
    }
    /**
     * We need to drop foreign keys first for all tables to allow dropping PK constraints.
     */
    preAlterTable(diff, safe) {
        const ret = [];
        const push = (sql) => sql ? ret.push(this.knex.schema.raw(sql)) : undefined;
        push(this.helper.getPreAlterTable(diff, safe));
        const [schemaName, tableName] = this.splitTableName(diff.name);
        ret.push(this.createSchemaBuilder(schemaName).alterTable(tableName, table => {
            for (const foreignKey of Object.values(diff.removedForeignKeys)) {
                table.dropForeign(foreignKey.columnNames, foreignKey.constraintName);
            }
            for (const foreignKey of Object.values(diff.changedForeignKeys)) {
                table.dropForeign(foreignKey.columnNames, foreignKey.constraintName);
            }
        }));
        return ret;
    }
    splitTableName(name) {
        const parts = name.split('.');
        const tableName = parts.pop();
        const schemaName = parts.pop();
        return [schemaName, tableName];
    }
    alterTable(diff, safe) {
        const ret = [];
        const [schemaName, tableName] = this.splitTableName(diff.name);
        ret.push(this.createSchemaBuilder(schemaName).alterTable(tableName, table => {
            for (const index of Object.values(diff.removedIndexes)) {
                this.dropIndex(table, index);
            }
            for (const index of Object.values(diff.changedIndexes)) {
                this.dropIndex(table, index);
            }
            for (const check of Object.values(diff.removedChecks)) {
                this.dropCheck(table, check);
            }
            for (const check of Object.values(diff.changedChecks)) {
                this.dropCheck(table, check);
            }
            for (const column of Object.values(diff.addedColumns)) {
                const col = this.helper.createTableColumn(table, column, diff.fromTable);
                this.configureColumn(column, col);
                const foreignKey = Object.values(diff.addedForeignKeys).find(fk => fk.columnNames.length === 1 && fk.columnNames[0] === column.name);
                if (foreignKey && this.options.createForeignKeyConstraints) {
                    delete diff.addedForeignKeys[foreignKey.constraintName];
                    col.references(foreignKey.referencedColumnNames[0])
                        .inTable(this.getReferencedTableName(foreignKey.referencedTableName))
                        .withKeyName(foreignKey.constraintName)
                        .onUpdate(foreignKey.updateRule)
                        .onDelete(foreignKey.deleteRule);
                }
            }
            /* istanbul ignore else */
            if (!safe) {
                for (const column of Object.values(diff.removedColumns)) {
                    table.dropColumn(column.name);
                }
            }
            for (const { column, changedProperties } of Object.values(diff.changedColumns)) {
                if (changedProperties.size === 1 && changedProperties.has('comment')) {
                    continue;
                }
                const col = this.helper.createTableColumn(table, column, diff.fromTable, changedProperties).alter();
                this.configureColumn(column, col, changedProperties);
            }
            for (const { column } of Object.values(diff.changedColumns).filter(diff => diff.changedProperties.has('autoincrement'))) {
                this.helper.pushTableQuery(table, this.helper.getAlterColumnAutoincrement(tableName, column));
            }
            for (const { column, changedProperties } of Object.values(diff.changedColumns).filter(diff => diff.changedProperties.has('comment'))) {
                if (['type', 'nullable', 'autoincrement', 'unsigned', 'default', 'enumItems'].some(t => changedProperties.has(t))) {
                    continue; // will be handled via knex
                }
                this.helper.pushTableQuery(table, this.helper.getChangeColumnCommentSQL(tableName, column));
            }
            for (const [oldColumnName, column] of Object.entries(diff.renamedColumns)) {
                this.helper.pushTableQuery(table, this.helper.getRenameColumnSQL(tableName, oldColumnName, column));
            }
            for (const foreignKey of Object.values(diff.addedForeignKeys)) {
                this.createForeignKey(table, foreignKey);
            }
            for (const foreignKey of Object.values(diff.changedForeignKeys)) {
                this.createForeignKey(table, foreignKey);
            }
            for (const index of Object.values(diff.addedIndexes)) {
                this.createIndex(table, index);
            }
            for (const index of Object.values(diff.changedIndexes)) {
                this.createIndex(table, index, true);
            }
            for (const [oldIndexName, index] of Object.entries(diff.renamedIndexes)) {
                if (index.unique) {
                    this.dropIndex(table, index, oldIndexName);
                    this.createIndex(table, index);
                }
                else {
                    this.helper.pushTableQuery(table, this.helper.getRenameIndexSQL(diff.name, index, oldIndexName));
                }
            }
            for (const check of Object.values(diff.addedChecks)) {
                this.createCheck(table, check);
            }
            for (const check of Object.values(diff.changedChecks)) {
                this.createCheck(table, check);
            }
            if ('changedComment' in diff) {
                const comment = diff.changedComment ? this.platform.quoteValue(diff.changedComment).replace(/^'|'$/g, '') : '';
                table.comment(comment);
            }
        }));
        return ret;
    }
    /**
     * creates new database and connects to it
     */
    async createDatabase(name) {
        await this.driver.execute(this.helper.getCreateDatabaseSQL('' + this.knex.ref(name)));
        this.config.set('dbName', name);
        await this.driver.reconnect();
    }
    async dropDatabase(name) {
        this.config.set('dbName', this.helper.getManagementDbName());
        await this.driver.reconnect();
        await this.driver.execute(this.helper.getDropDatabaseSQL('' + this.knex.ref(name)));
    }
    async execute(sql, options = {}) {
        options.wrap ?? (options.wrap = false);
        const lines = this.wrapSchema(sql, options).split('\n').filter(i => i.trim());
        for (const line of lines) {
            await this.driver.execute(line);
        }
    }
    wrapSchema(sql, options = {}) {
        options.wrap ?? (options.wrap = this.options.disableForeignKeys);
        if (!options.wrap || sql.trim() === '') {
            return sql;
        }
        let ret = this.helper.getSchemaBeginning(this.config.get('charset'));
        ret += sql;
        ret += this.helper.getSchemaEnd();
        return ret;
    }
    createSchemaBuilder(schema) {
        const builder = this.knex.schema;
        if (schema && schema !== this.platform.getDefaultSchemaName()) {
            builder.withSchema(schema);
        }
        return builder;
    }
    createTable(tableDef) {
        return this.createSchemaBuilder(tableDef.schema).createTable(tableDef.name, table => {
            tableDef.getColumns().forEach(column => {
                const col = this.helper.createTableColumn(table, column, tableDef);
                this.configureColumn(column, col);
            });
            for (const index of tableDef.getIndexes()) {
                this.createIndex(table, index, !tableDef.getColumns().some(c => c.autoincrement));
            }
            for (const check of tableDef.getChecks()) {
                this.createCheck(table, check);
            }
            if (tableDef.comment) {
                const comment = this.platform.quoteValue(tableDef.comment).replace(/^'|'$/g, '');
                table.comment(comment);
            }
            if (!this.helper.supportsSchemaConstraints()) {
                for (const fk of Object.values(tableDef.getForeignKeys())) {
                    this.createForeignKey(table, fk);
                }
            }
            this.helper.finalizeTable(table, this.config.get('charset'), this.config.get('collate'));
        });
    }
    createIndex(table, index, createPrimary = false) {
        if (index.primary && !createPrimary) {
            return;
        }
        if (index.primary) {
            const keyName = this.platform.supportsCustomPrimaryKeyNames() ? index.keyName : undefined;
            table.primary(index.columnNames, keyName);
        }
        else if (index.unique) {
            table.unique(index.columnNames, { indexName: index.keyName });
        }
        else if (index.expression) {
            this.helper.pushTableQuery(table, index.expression);
        }
        else {
            table.index(index.columnNames, index.keyName, index.type);
        }
    }
    dropIndex(table, index, oldIndexName = index.keyName) {
        if (index.primary) {
            table.dropPrimary(oldIndexName);
        }
        else if (index.unique) {
            table.dropUnique(index.columnNames, oldIndexName);
        }
        else {
            table.dropIndex(index.columnNames, oldIndexName);
        }
    }
    createCheck(table, check) {
        table.check(check.expression, {}, check.name);
    }
    dropCheck(table, check) {
        table.dropChecks(check.name);
    }
    dropTable(name, schema) {
        let builder = this.createSchemaBuilder(schema).dropTableIfExists(name);
        if (this.platform.usesCascadeStatement()) {
            builder = this.knex.schema.raw(builder.toQuery() + ' cascade');
        }
        return builder;
    }
    configureColumn(column, col, changedProperties) {
        return this.helper.configureColumn(column, col, this.knex, changedProperties);
    }
    createForeignKeys(table, tableDef, schema) {
        if (!this.helper.supportsSchemaConstraints()) {
            return;
        }
        for (const fk of Object.values(tableDef.getForeignKeys())) {
            this.createForeignKey(table, fk, schema);
        }
    }
    async dump(builder, append = '\n\n') {
        const sql = await builder.generateDdlCommands();
        const queries = [...sql.pre, ...sql.sql, ...sql.post];
        if (queries.length === 0) {
            return '';
        }
        const dump = `${queries.map(q => typeof q === 'object' ? q.sql : q).join(';\n')};${append}`;
        const tmp = dump.replace(/pragma table_.+/ig, '').replace(/\n\n+/g, '\n').trim();
        return tmp ? tmp + append : '';
    }
}
exports.SchemaGenerator = SchemaGenerator;
