"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlEntityManager = void 0;
const core_1 = require("@mikro-orm/core");
const query_1 = require("./query");
/**
 * @inheritDoc
 */
class SqlEntityManager extends core_1.EntityManager {
    /**
     * Creates a QueryBuilder instance
     */
    createQueryBuilder(entityName, alias, type) {
        entityName = core_1.Utils.className(entityName);
        const context = this.getContext();
        return new query_1.QueryBuilder(entityName, this.getMetadata(), this.getDriver(), context.getTransactionContext(), alias, type, context);
    }
    /**
     * Shortcut for `createQueryBuilder()`
     */
    qb(entityName, alias, type) {
        return this.createQueryBuilder(entityName, alias, type);
    }
    /**
     * Creates raw SQL query that won't be escaped when used as a parameter.
     */
    raw(sql, bindings = []) {
        const raw = this.getKnex().raw(sql, bindings);
        raw.__raw = true; // tag it as there is now way to check via `instanceof`
        return raw;
    }
    /**
     * Returns configured knex instance.
     */
    getKnex(type) {
        return this.getConnection(type).getKnex();
    }
    async execute(queryOrKnex, params = [], method = 'all') {
        return this.getDriver().execute(queryOrKnex, params, method, this.getTransactionContext());
    }
    getRepository(entityName) {
        return super.getRepository(entityName);
    }
}
exports.SqlEntityManager = SqlEntityManager;
