import type { Constructor, EntityManager, EntityRepository, IDatabaseDriver } from '@mikro-orm/core';
import { Platform } from '@mikro-orm/core';
import type { SchemaHelper } from './schema';
import { SchemaGenerator } from './schema';
import type { SqlEntityManager } from './SqlEntityManager';
export declare abstract class AbstractSqlPlatform extends Platform {
    protected readonly schemaHelper?: SchemaHelper;
    usesPivotTable(): boolean;
    indexForeignKeys(): boolean;
    getRepositoryClass<T>(): Constructor<EntityRepository<T>>;
    getSchemaHelper(): SchemaHelper | undefined;
    getSchemaGenerator(driver: IDatabaseDriver, em?: SqlEntityManager): SchemaGenerator;
    getEntityGenerator(em: EntityManager): any;
    getMigrator(em: EntityManager): any;
    quoteValue(value: any): string;
    formatQuery(sql: string, params: readonly any[]): string;
    getSearchJsonPropertySQL(path: string, type: string): string;
    isRaw(value: any): boolean;
    supportsSchemas(): boolean;
    /** @inheritDoc */
    generateCustomOrder(escapedColumn: string, values: unknown[]): string;
}
