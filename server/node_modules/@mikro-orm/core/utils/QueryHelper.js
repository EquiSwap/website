"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expr = exports.QueryHelper = void 0;
const Reference_1 = require("../entity/Reference");
const Utils_1 = require("./Utils");
const enums_1 = require("../enums");
const JsonType_1 = require("../types/JsonType");
class QueryHelper {
    static processParams(params) {
        if (Reference_1.Reference.isReference(params)) {
            params = params.unwrap();
        }
        if (Utils_1.Utils.isEntity(params)) {
            if (params.__meta.compositePK) {
                return params.__helper.__primaryKeys;
            }
            return params.__helper.getPrimaryKey();
        }
        if (params === undefined) {
            return null;
        }
        if (Array.isArray(params)) {
            return params.map(item => QueryHelper.processParams(item));
        }
        if (Utils_1.Utils.isPlainObject(params)) {
            QueryHelper.processObjectParams(params);
        }
        return params;
    }
    static processObjectParams(params = {}) {
        Object.keys(params).forEach(k => {
            params[k] = QueryHelper.processParams(params[k]);
        });
        return params;
    }
    static inlinePrimaryKeyObjects(where, meta, metadata, key) {
        if (Array.isArray(where)) {
            where.forEach((item, i) => {
                if (this.inlinePrimaryKeyObjects(item, meta, metadata, key)) {
                    where[i] = Utils_1.Utils.getPrimaryKeyValues(item, meta.primaryKeys, false);
                }
            });
        }
        if (!Utils_1.Utils.isPlainObject(where)) {
            return false;
        }
        if (meta.primaryKeys.every(pk => pk in where) && Utils_1.Utils.getObjectKeysSize(where) === meta.primaryKeys.length) {
            return !enums_1.GroupOperator[key] && Object.keys(where).every(k => !Utils_1.Utils.isPlainObject(where[k]) || Object.keys(where[k]).every(v => {
                if (Utils_1.Utils.isOperator(v, false)) {
                    return false;
                }
                if ([enums_1.ReferenceType.ONE_TO_ONE, enums_1.ReferenceType.MANY_TO_ONE].includes(meta.properties[k].reference)) {
                    return this.inlinePrimaryKeyObjects(where[k], meta.properties[k].targetMeta, metadata, v);
                }
                return true;
            }));
        }
        Object.keys(where).forEach(k => {
            const meta2 = metadata.find(meta.properties[k]?.type) || meta;
            if (this.inlinePrimaryKeyObjects(where[k], meta2, metadata, k)) {
                where[k] = Utils_1.Utils.getPrimaryKeyValues(where[k], meta2.primaryKeys, true);
            }
        });
        return false;
    }
    static processWhere(where, entityName, metadata, platform, convertCustomTypes = true, root = true) {
        const meta = metadata.find(entityName);
        // inline PK-only objects in M:N queries so we don't join the target entity when not needed
        if (meta && root) {
            QueryHelper.inlinePrimaryKeyObjects(where, meta, metadata);
        }
        where = QueryHelper.processParams(where) || {};
        /* istanbul ignore next */
        if (!root && Utils_1.Utils.isPrimaryKey(where)) {
            return where;
        }
        if (meta && Utils_1.Utils.isPrimaryKey(where, meta.compositePK)) {
            where = { [Utils_1.Utils.getPrimaryKeyHash(meta.primaryKeys)]: where };
        }
        if (Array.isArray(where) && root) {
            const rootPrimaryKey = meta ? Utils_1.Utils.getPrimaryKeyHash(meta.primaryKeys) : entityName;
            const cond = { [rootPrimaryKey]: { $in: where } };
            return QueryHelper.processWhere(cond, entityName, metadata, platform, convertCustomTypes, false);
        }
        if (!Utils_1.Utils.isPlainObject(where)) {
            return where;
        }
        return Object.keys(where).reduce((o, key) => {
            let value = where[key];
            const prop = meta?.properties[key];
            const keys = prop?.joinColumns?.length ?? 0;
            const composite = keys > 1;
            if (key in enums_1.GroupOperator) {
                o[key] = value.map((sub) => QueryHelper.processWhere(sub, entityName, metadata, platform, convertCustomTypes, false));
                return o;
            }
            // wrap top level operators (except $not) with PK
            if (Utils_1.Utils.isOperator(key) && root && meta && key !== '$not') {
                const rootPrimaryKey = Utils_1.Utils.getPrimaryKeyHash(meta.primaryKeys);
                o[rootPrimaryKey] = { [key]: QueryHelper.processWhere(value, entityName, metadata, platform, convertCustomTypes, false) };
                return o;
            }
            if (prop?.customType && convertCustomTypes && !platform.isRaw(value)) {
                value = QueryHelper.processCustomType(prop, value, platform, undefined, true);
            }
            if (prop?.customType instanceof JsonType_1.JsonType && Utils_1.Utils.isPlainObject(value) && !platform.isRaw(value)) {
                return this.processJsonCondition(o, value, [prop.fieldNames[0]], platform);
            }
            if (Array.isArray(value) && !Utils_1.Utils.isOperator(key) && !QueryHelper.isSupportedOperator(key) && !key.includes('?')) {
                if (platform.allowsComparingTuples()) {
                    // comparing single composite key - use $eq instead of $in
                    const op = !value.every(v => Array.isArray(v)) && composite ? '$eq' : '$in';
                    o[key] = { [op]: value };
                }
                else {
                    if (!value.every(v => Array.isArray(v)) && composite) {
                        o[key] = { $in: [value] };
                    }
                    else {
                        o[key] = { $in: value };
                    }
                }
                return o;
            }
            const re = '[^:]+(' + this.SUPPORTED_OPERATORS.filter(op => op.startsWith(':')).map(op => `${op}`).join('|') + ')$';
            const operatorExpression = new RegExp(re).exec(key);
            if (Utils_1.Utils.isPlainObject(value)) {
                o[key] = QueryHelper.processWhere(value, prop?.type ?? entityName, metadata, platform, convertCustomTypes, false);
            }
            else if (!QueryHelper.isSupportedOperator(key)) {
                o[key] = value;
            }
            else if (operatorExpression) {
                const [k, expr] = key.split(':');
                o[k] = QueryHelper.processExpression(expr, value);
            }
            else {
                const m = key.match(/([\w-]+) ?([<>=!]+)$/);
                if (m) {
                    o[m[1]] = QueryHelper.processExpression(m[2], value);
                }
                else {
                    o[key] = value;
                }
            }
            return o;
        }, {});
    }
    static getActiveFilters(entityName, options, filters) {
        if (options === false) {
            return [];
        }
        const opts = {};
        if (Array.isArray(options)) {
            options.forEach(filter => opts[filter] = true);
        }
        else if (Utils_1.Utils.isPlainObject(options)) {
            Object.keys(options).forEach(filter => opts[filter] = options[filter]);
        }
        return Object.keys(filters)
            .filter(f => QueryHelper.isFilterActive(entityName, f, filters[f], opts))
            .map(f => {
            filters[f].name = f;
            return filters[f];
        });
    }
    static isFilterActive(entityName, filterName, filter, options) {
        if (filter.entity && !filter.entity.includes(entityName)) {
            return false;
        }
        if (options[filterName] === false) {
            return false;
        }
        return filter.default || filterName in options;
    }
    static processCustomType(prop, cond, platform, key, fromQuery) {
        if (Utils_1.Utils.isPlainObject(cond)) {
            return Object.keys(cond).reduce((o, k) => {
                if (Utils_1.Utils.isOperator(k, true) || prop.referencedPKs?.includes(k)) {
                    o[k] = QueryHelper.processCustomType(prop, cond[k], platform, k, fromQuery);
                }
                else {
                    o[k] = cond[k];
                }
                return o;
            }, {});
        }
        if (Array.isArray(cond) && !(key && enums_1.ARRAY_OPERATORS.includes(key))) {
            return cond.map(v => QueryHelper.processCustomType(prop, v, platform, key, fromQuery));
        }
        return prop.customType.convertToDatabaseValue(cond, platform, fromQuery);
    }
    static processExpression(expr, value) {
        switch (expr) {
            case '>': return { $gt: value };
            case '<': return { $lt: value };
            case '>=': return { $gte: value };
            case '<=': return { $lte: value };
            case '!=': return { $ne: value };
            case '!': return { $not: value };
            default: return { ['$' + expr]: value };
        }
    }
    static isSupportedOperator(key) {
        return !!QueryHelper.SUPPORTED_OPERATORS.find(op => key.includes(op));
    }
    static processJsonCondition(o, value, path, platform) {
        if (Utils_1.Utils.isPlainObject(value) && !Object.keys(value).some(k => Utils_1.Utils.isOperator(k))) {
            Object.keys(value).forEach(k => {
                this.processJsonCondition(o, value[k], [...path, k], platform);
            });
            return o;
        }
        const operatorObject = Utils_1.Utils.isPlainObject(value) && Object.keys(value).every(k => Utils_1.Utils.isOperator(k));
        const type = operatorObject ? typeof Object.values(value)[0] : typeof value;
        const k = platform.getSearchJsonPropertyKey(path, type);
        o[k] = value;
        return o;
    }
}
exports.QueryHelper = QueryHelper;
QueryHelper.SUPPORTED_OPERATORS = ['>', '<', '<=', '>=', '!', '!=', ':in', ':nin', ':gt', ':gte', ':lt', ':lte', ':ne', ':not'];
/**
 * Helper for escaping string types, e.g. `keyof T -> string`.
 * We can also pass array of strings to allow tuple comparison in SQL drivers.
 * Another alternative is to use callback signature, which will give us the current alias in its parameter.
 */
function expr(sql) {
    if (sql instanceof Function) {
        return sql('[::alias::]');
    }
    if (Array.isArray(sql)) {
        return Utils_1.Utils.getPrimaryKeyHash(sql);
    }
    return sql;
}
exports.expr = expr;
