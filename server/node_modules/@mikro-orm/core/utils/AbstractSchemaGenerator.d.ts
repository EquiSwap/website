import type { EntityMetadata, ISchemaGenerator } from '../typings';
import type { IDatabaseDriver } from '../drivers/IDatabaseDriver';
import type { MetadataStorage } from '../metadata/MetadataStorage';
import type { Configuration } from './Configuration';
export declare abstract class AbstractSchemaGenerator<D extends IDatabaseDriver> implements ISchemaGenerator {
    protected readonly em?: ReturnType<D['createEntityManager']>;
    protected readonly driver: D;
    protected readonly config: Configuration;
    protected readonly metadata: MetadataStorage;
    protected readonly platform: ReturnType<D['getPlatform']>;
    protected readonly connection: ReturnType<D['getConnection']>;
    constructor(em: D | ReturnType<D['createEntityManager']>);
    generate(): Promise<string>;
    createSchema(): Promise<void>;
    /**
     * Returns true if the database was created.
     */
    ensureDatabase(): Promise<boolean>;
    refreshDatabase(): Promise<void>;
    clearDatabase(options?: {
        schema?: string;
    }): Promise<void>;
    getCreateSchemaSQL(): Promise<string>;
    dropSchema(): Promise<void>;
    getDropSchemaSQL(): Promise<string>;
    updateSchema(): Promise<void>;
    getUpdateSchemaSQL(): Promise<string>;
    getUpdateSchemaMigrationSQL(): Promise<{
        up: string;
        down: string;
    }>;
    /**
     * creates new database and connects to it
     */
    createDatabase(name: string): Promise<void>;
    dropDatabase(name: string): Promise<void>;
    execute(query: string): Promise<void>;
    ensureIndexes(): Promise<void>;
    protected getOrderedMetadata(schema?: string): EntityMetadata[];
    protected notImplemented(): never;
}
