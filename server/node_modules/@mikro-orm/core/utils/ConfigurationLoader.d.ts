import type { IDatabaseDriver } from '../drivers';
import type { Options } from './Configuration';
import { Configuration } from './Configuration';
import type { Dictionary } from '../typings';
/**
 * @internal
 */
export declare class ConfigurationLoader {
    static getConfiguration<D extends IDatabaseDriver = IDatabaseDriver>(validate?: boolean, options?: Partial<Options>): Promise<Configuration<D>>;
    static getPackageConfig(basePath?: string): Promise<Dictionary>;
    static getSettings(): Promise<Settings>;
    static getConfigPaths(): Promise<string[]>;
    static registerTsNode(configPath?: string): Promise<void>;
    static registerDotenv<D extends IDatabaseDriver>(options?: Options<D> | Configuration<D>): void;
    static loadEnvironmentVars<D extends IDatabaseDriver>(): Partial<Options<D>>;
    static getORMPackages(): Promise<Set<string>>;
    static getORMPackageVersion(name: string): Promise<string | undefined>;
    static checkPackageVersion(): Promise<string>;
}
export interface Settings {
    useTsNode?: boolean;
    tsConfigPath?: string;
    configPaths?: string[];
}
