import type { EntityData, EntityDTO, IWrappedEntity, Loaded } from '../typings';
import type { AssignOptions } from './EntityAssigner';
export declare abstract class BaseEntity<T, PK extends keyof T, P extends string = never> implements IWrappedEntity<T, PK, P> {
    isInitialized(): boolean;
    isTouched(): boolean;
    populated(populated?: boolean): void;
    toReference(): any;
    toObject(ignoreFields?: string[]): EntityDTO<T>;
    toJSON(...args: any[]): EntityDTO<T>;
    toPOJO(): EntityDTO<T>;
    assign(data: EntityData<T>, options?: AssignOptions): T;
    init<P extends string = never>(populated?: boolean): Promise<Loaded<T, P>>;
    getSchema(): string | undefined;
    setSchema(schema?: string): void;
}
