"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultLogger = void 0;
const Utils_1 = require("../utils/Utils");
const colors_1 = require("./colors");
class DefaultLogger {
    constructor(options) {
        this.options = options;
        this.debugMode = this.options.debugMode ?? false;
        this.usesReplicas = this.options.usesReplicas;
        this.highlighter = this.options.highlighter;
        this.writer = this.options.writer;
    }
    /**
     * @inheritDoc
     */
    log(namespace, message, context) {
        if (!this.isEnabled(namespace)) {
            return;
        }
        // clean up the whitespace
        message = message.replace(/\n/g, '').replace(/ +/g, ' ').trim();
        // use red for error levels
        if (context?.level === 'error') {
            message = colors_1.colors.red(message);
        }
        // use yellow for warning levels
        if (context?.level === 'warning') {
            message = colors_1.colors.yellow(message);
        }
        this.writer(colors_1.colors.grey(`[${namespace}] `) + message);
    }
    /**
     * @inheritDoc
     */
    error(namespace, message, context) {
        this.log(namespace, message, { ...context, level: 'error' });
    }
    /**
     * @inheritDoc
     */
    warn(namespace, message, context) {
        this.log(namespace, message, { ...context, level: 'warning' });
    }
    /**
     * @inheritDoc
     */
    setDebugMode(debugMode) {
        this.debugMode = debugMode;
    }
    isEnabled(namespace) {
        return !!this.debugMode && (!Array.isArray(this.debugMode) || this.debugMode.includes(namespace));
    }
    /**
     * @inheritDoc
     */
    logQuery(context) {
        if (!this.isEnabled('query')) {
            return;
        }
        /* istanbul ignore next */
        const query = this.highlighter?.highlight(context.query) ?? context.query;
        let msg = query + (Utils_1.Utils.isDefined(context.took) ? colors_1.colors.grey(` [took ${context.took} ms]`) : '');
        if (this.usesReplicas && context.connection) {
            msg += colors_1.colors.cyan(` (via ${context.connection.type} connection '${context.connection.name}')`);
        }
        return this.log('query', msg, context);
    }
}
exports.DefaultLogger = DefaultLogger;
