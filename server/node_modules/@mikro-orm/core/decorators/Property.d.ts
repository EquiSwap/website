import type { Cascade, LoadStrategy } from '../enums';
import type { EntityName, Constructor, CheckCallback } from '../typings';
import type { Type } from '../types';
export declare function Property<T>(options?: PropertyOptions<T>): (target: any, propertyName: string) => any;
export declare type PropertyOptions<T> = {
    name?: string;
    fieldName?: string;
    fieldNames?: string[];
    customType?: Type<any>;
    columnType?: string;
    type?: 'string' | 'number' | 'boolean' | 'bigint' | 'ObjectId' | string | unknown | bigint | Date | Constructor<Type<any>> | Type<any>;
    length?: number;
    precision?: number;
    scale?: number;
    autoincrement?: boolean;
    onCreate?: (entity: T) => any;
    onUpdate?: (entity: T) => any;
    default?: string | string[] | number | number[] | boolean | null;
    defaultRaw?: string;
    formula?: string | ((alias: string) => string);
    nullable?: boolean;
    unsigned?: boolean;
    persist?: boolean;
    hidden?: boolean;
    version?: boolean;
    concurrencyCheck?: boolean;
    index?: boolean | string;
    unique?: boolean | string;
    check?: string | CheckCallback<T>;
    lazy?: boolean;
    primary?: boolean;
    setter?: boolean;
    getter?: boolean;
    serializedPrimaryKey?: boolean;
    serializer?: (value: any) => any;
    serializedName?: string;
    customOrder?: string[] | number[] | boolean[];
    comment?: string;
    /** mysql only */
    extra?: string;
};
export interface ReferenceOptions<T, O> extends PropertyOptions<O> {
    entity?: string | (() => EntityName<T>);
    cascade?: Cascade[];
    eager?: boolean;
    strategy?: LoadStrategy;
}
