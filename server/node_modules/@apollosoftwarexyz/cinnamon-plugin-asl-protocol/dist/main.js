"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloProtocol = void 0;
const cinnamon_1 = require("@apollosoftwarexyz/cinnamon");
class ApolloProtocol extends cinnamon_1.CinnamonPlugin {
    constructor(framework) {
        super(framework, "xyz.apollosoftware", "cinnamon.protocol");
    }
    async onInitialize() {
        return true;
    }
    async beforeRegisterControllers() {
        this.framework
            .getModule(cinnamon_1.WebServer.prototype)
            .server.use(async (ctx, next) => {
            ctx.success = function (payload) {
                ctx.response.status = 200;
                ctx.response.type = "application/json";
                ctx.response.body = JSON.stringify({
                    success: true,
                    payload,
                });
            };
            ctx.successRaw = function (rawPayload, mimeType = "text/plain") {
                if (typeof rawPayload === "object")
                    rawPayload["raw"] = true;
                ctx.response.status = 200;
                ctx.response.type = mimeType;
                ctx.response.body =
                    mimeType !== "application/json" ? rawPayload : "null";
            };
            ctx.error = function (code = 400, error = "ERR_UNEXPECTED", message = "An unexpected error occurred.") {
                ctx.response.status = code;
                ctx.response.type = "application/json";
                ctx.response.body = JSON.stringify({
                    success: false,
                    error,
                    message,
                });
            };
            return await next();
        });
    }
}
exports.ApolloProtocol = ApolloProtocol;
