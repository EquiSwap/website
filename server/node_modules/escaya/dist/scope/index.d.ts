import { BindingType, Context, ParserState } from '../common';
import { ScopeKind } from './common';
import { DiagnosticCode } from '../diagnostic/diagnostic-code';
export interface ScopeState {
    parent: ScopeState | undefined;
    type: ScopeKind;
    scopeError?: ScopeError | null;
}
export interface ScopeError {
    code: DiagnosticCode;
    start: number;
}
export declare function createScope(): ScopeState;
export declare function createParentScope(parent: ScopeState | undefined, type: ScopeKind): ScopeState;
export declare function addVarOrBlock(parser: ParserState, context: Context, scope: ScopeState, name: string, bindingType: BindingType): void;
export declare function addVarName(state: ParserState, context: Context, scope: ScopeState, name: string, type: BindingType): void;
export declare function addBlockName(state: ParserState, context: Context, scope: any, name: string, type: BindingType): void;
export declare function declareUnboundVariable(state: ParserState, context: Context, name: string): void;
export declare function addBindingToExports(state: ParserState, name: string): void;
//# sourceMappingURL=index.d.ts.map