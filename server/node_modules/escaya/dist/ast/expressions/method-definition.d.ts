import { MethodName, Parameter, BindingPattern } from '.';
import { BindingElement } from './binding-element';
import { BindingIdentifier } from './binding-identifier';
import { FunctionBody } from './function-body';
import { Node } from '../node';
export interface MethodDefinition extends Node {
    readonly async: boolean;
    readonly generator: boolean;
    readonly getter: boolean;
    readonly setter: boolean;
    readonly propertySetParameterList: BindingIdentifier | BindingPattern | BindingElement | null;
    readonly uniqueFormalParameters: Parameter[];
    readonly name: MethodName;
    readonly contents: FunctionBody;
}
export declare function createMethodDefinition(async: boolean, generator: boolean, getter: boolean, setter: boolean, propertySetParameterList: BindingIdentifier | BindingPattern | BindingElement | null, uniqueFormalParameters: Parameter[], name: MethodName, contents: FunctionBody): MethodDefinition;
//# sourceMappingURL=method-definition.d.ts.map